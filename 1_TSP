> import numpy as np      #the NumPy library enables efficient numerical operations on arrays and matrices, commonly used for scientific computing and data analysis.


> def calculate_distance(city1, city2):    #Calculate the distance between two cities
    return np.linalg.norm(np.array(city1) - np.array(city2))      # np.linalg.norm is a function by numpy that helps us figure out how long a vector is or how far apart two points are.


> def nearest_neighbor_algorithm(city_coordinates):          # Implement the nearest neighbor algorithm to find an approximate solution to the TSP.
    num_cities = len(city_coordinates)                     #returns the number of elements in the city_coordinates list
    unvisited_cities = set(range(num_cities))              # Create a set of unvisited cities
    tour = []                                              # Initialize the tour list
    
    # Start from a random city
    current_city = np.random.choice(list(unvisited_cities))          # Select a random city
    unvisited_cities.remove(current_city)                            # Remove the current city from unvisited cities
    tour.append(current_city)                                        # Add the current city to the tour

    
    # Visit all unvisited cities
    while unvisited_cities:                                 # Find the nearest unvisited city to the current city min finds the smallest item in the list of unvisited cities
        nearest_city = min(unvisited_cities,                
                           key=lambda city: 
                           calculate_distance(city_coordinates[current_city], city_coordinates[city]))          #This part defines how we determine which city is the nearest. 
                                                                                                                #It's like a rule we use to compare cities.It calculates the distance between 
                                                                                                                #the current_city and each city in unvisited_cities, 
                                                                                                                #then finds the city with the smallest distance.
                    
        unvisited_cities.remove(nearest_city)               # Remove the nearest city from unvisited cities
        tour.append(nearest_city)                            # Add the nearest city to the tour
        current_city = nearest_city                          # Update the current city
    return tour


> def calculate_total_distance(tour, city_coordinates):                     #Calculate the total istance traveled for a given tour.
    total_distance = 0
    for i in range(len(tour)):                           # Add the distance between consecutive cities to total_distance
        total_distance += calculate_distance(city_coordinates[tour[i]], city_coordinates[tour[(i + 1) % len(tour)]]) 
         # Return the total distance traveled along the tour the % len(tour) part ensures this looping behavior. 
         #It divides the index i + 1 by the total number of cities (len(tour)), and then gives you the remainder. 
         #This remainder tells you where you are in the list
    
    return total_distance


> # Example usage
city_coordinates = [(0, 0), (2, 1), (1, 3), (4, 5), (6, 2)]
tour = nearest_neighbor_algorithm(city_coordinates)
total_distance = calculate_total_distance(tour, city_coordinates)

print("Optimal tour:", tour)
print("Total distance:", total_distance)    
